name: Build and Deploy to EC2

# main 브랜치에 병합될 때 실행됨.
on:
  push:
#    branches:
#      - main
    tags:
      - 'v*'  # 태그가 v로 시작하는 경우에만 실행됨. 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # GitHub Actions에서 실행되는 가상머신(Runner)으로 Ubuntu 환경에서 실행되며 임시가상클라우드를 제공, docker build, push 등 가능

    steps:
      # 1.현재 레포지토리 소스를 체크아웃.
      # github actions 워크플로우 실행 전 commit 기준 repository를 gitaction runner 가상임시서버에 임시저장
      # Runner 가상머신 내 기본 작업디렉토리코드를 가져옴
      # path를 통해 repository 내 특정디렉토리로 경로지정 가능능
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Docker Buildx 설정 (도커 이미지의 효율적 생성을 위한 설정)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 2.5 loging을 위한 commit 해쉬값 추출
      - name: Get commit info
        run: |
          echo "SHORT_HASH=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV

      # 3. DockerHub 로그인
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWD }}" | docker login -u ${{ secrets.DOCKER_NAME }} --password-stdin

      # 4. Docker 이미지 빌드 및 DockerHub에 push(env값 추가빌드)
      - name: Build and push image
        
        #환경변수설정을 통한 commit tag 정보 전달
        # 예 : 'v0.0.1' 태그를 사용하여 이미지 버전 관리
        # 태깅을 trigger로 설정 - github.ref_name은 태깅값값 
        env:
          IMAGE_NAME: sechankim/deploy_test
          IMAGE_TAG: ${{ github.ref_name }}   # 예: 'v0.0.1'
        run: |
          docker build \
          --build-arg GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
          --build-arg WEBSHARE_PROXY_URL=${{ secrets.WEBSHARE_PROXY_URL }} \
          -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG


      # 5.  SSH를 위해 개인키를 등록하고 EC2 호스트 키 저장
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 15.164.146.31 >> ~/.ssh/known_hosts

      # 6. 로깅을 위한 commit 해쉬값 추출
      #- name: Get short commit hash
      #  id: vars
      #  run: echo "SHORT_HASH=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      # 6. EC2에 접속하여 이미지 pull 및 컨테이너 재실행
      - name: Deploy to EC2
        env:
          SHORT_HASH: ${{ env.SHORT_HASH }}
          COMMIT_MESSAGE: ${{ env.COMMIT_MESSAGE }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@15.164.146.31 << 'EOF'
            cd goathub_check03
            docker compose down
            docker compose pull
            docker compose up -d
            
            IMAGE_NAME=sechankim/deploy_test
            IMAGE_TAG=${{ github.ref_name }}
            COMMIT_HASH=${SHORT_HASH}
            COMMIT_MESSAGE=\"${COMMIT_MESSAGE}\"
            timestamp=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S')
            LOG_FILE=~/goathub_check03/build.log

            # 로깅
            echo "${timestamp} - Build Triggered." >> $LOG_FILE
            echo \"  ├ Tag               : \$IMAGE_TAG\" >> \$LOG_FILE
            echo \"  ├ Commit Hashvalue  : \$COMMIT_HASH\" >> \$LOG_FILE
            echo \"  ├ Commit Message    : \$COMMIT_MESSAGE\" >> \$LOG_FILE            
            echo \"  ├ CI/CD tool        : GitHub Actions\" >> \$LOG_FILE
            echo \"  ├ DockerHub Image   : \$IMAGE_NAME:\$IMAGE_TAG\" >> \$LOG_FILE
            echo \"  └ Status            : ✅ Deploy Success\" >> \$LOG_FILE
            
            echo "  ├ 서비스 상태 점검 결과\" >> $LOG_FILE
             #for SERVICE in streamlit-app nginx-proxy; do
             #   STATUS_LINE="  │  ├ $SERVICE"
             #   
             #   for i in {1..5}; do
             #       if docker ps --format '{{.Names}}' | grep -q "$SERVICE"; then
             #           printf "%-26s : ✅ running (checked after ${i}s)\n" "$STATUS_LINE" >> \$LOG_FILE
             #           break
             #       fi
             #       sleep 1
             #   done

             #   if ! docker ps --format '{{.Names}}' | grep -q "$SERVICE"; then
             #       printf "%-26s : ❌ not running (after 5s)\n" "$STATUS_LINE" >> \$LOG_FILE
             #   fi
             #done
             #echo \"  │  └ 상태 점검 완료" >> \$LOG_FILE
          EOF